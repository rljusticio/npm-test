-one of the most important things npm does is install packages

-npm is best when you can be a part of it
  -this starts with making an account

-To see who you're logged in as, run `npm whoami`
-To create your account, run `npm adduser`

-npm helps us build projects
  -but for npm to be able to do that, we need to tell npm a little bit about our project
  -we can tell npm about our project in a package.json file

  -npm init --scope=<username>
    -this will create a package.json file

  -The convention is to have a single git repo for each module or project
    -Use the `git init` command to set up our working directory as a git project

  -The first thing that most people do with npm is install a dependency.
    -Dependencies are fetched from the registry, and unpacked in the `node_modules` folder.
    -To install a module, use the `npm install <modulename>` command.

  -npm isn't just for installing stuff.  It also shows you what you have installed.
    -we can do this using the `npm ls` command
      -our dependencies should be listed in the package.json file in an object called 'dependencies'
        -when we install packages, we must update the package.json file to list out this dependency
          -if we don't, an error shows up as 'extraneous', warning us that we have something there that
          we haven't listed as a dependency.

          -use the `--save` flag when installing dependencies.
            -You might not want to do this with things that you're just trying out
            -when you decide on something you can use this flag to update your package.json file easily

  -look at the package.json file, it has this rather odd bit in it:

    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    }

    -npm can be used as a task runner
      -almost every module and project will have a test script that runs to make sure everything is good.
        -in order to help remind you to do this, npm puts a "always failing" test in there by default

-Before we can share this code with the world, we need to make it a bit more polished so that people know how to use it.
  -be sure to add readme, description, and repository fields

-it's very easy for all npm users to publish their modules and share them with the world.
  -packages get into the registry by using the `npm publish` command

-every package in npm has a version number associated with it
  -as we release updates to our package, these updates get an updated version number

  -Version numbers in npm follow a standard called "SemVer".
    -This stands for "Semantic Version".
      -The specification for this standard can be found at http://semver.org.

      The tl;dr version is that for a version like this:

        1.2.3
        ^ ^ ^
        | | `-- Patch version. Update for every change.
        | `---- Minor version. Update for API additions.
        `------ Major version. Update for breaking API changes.
        -npm has a special command called `npm version`
        -this will update your package.json file for you, and also commit the change to git if your project is a git repository.
          -if you don't trust the machines, you can open up your package.json file by hand, and put some new numbers in the "version" field
          -The npm registry won't let you publish a new release of your package without updating the version number!
            -get used to the idea of bumping the version whenever you want to publish, even if the change is really minor.

-Healthy packages get published again and again with new and exciting bug fixes
  -change the version number whenever the package is updated

-every published packageon npm has a dist-tags entry on it which maps strings like "latest" to version numbers like "1.2.48"
  -by default, the latest version is what gets installed
  -when we publish, the version that we publish gets tagged as latest

  -if you need to publish something and not make it the default version of a package, we can manually manage these distribution tags with the dist-tags function
    -npm dist-tag add <pkg>@<version> [<tag>]
      -npm dist-tag add jdw_dev/npm @1.0.1 latest

-the only dist-tag we can't ever remove is latest
  -every package installs it's latest tag by default
    -we can however, point latest to a different version, or delete other tags
      -npm dist-tag rm <pkg> <tag>
        -npm dist-tag rm jdw_dev/npm tag
